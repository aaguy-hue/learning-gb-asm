things to do:
- handle winning (when no bricks are left)
- add score count
- high score?
- bigger paddle?
- indicating when you win
- keeping score (make some tiles for numbers? maybe look into rgbgfx?)
- make the ball slower (only calculate collisions/movement for the ball every 2 frames or so, then change the speed)
- make the ball go at a 30deg angle when hit by the paddle while moving (if you do the thing above, just set x speed to 1 and y speed to 2 or something, otherwise set x and y speed to 1)

things to improve:
- ball-paddle collision code (see bugs)
- CollideBall function

things that are done:
- make blocks disappear when hit
- drawing a ball
- drawing a paddle
- drawing a background
- drawing bricks
- ball-paddle collisions
- ball-brick collisions
- indicating when you lose
- title screen
- ball count


bugs:
- hitting the ball from the side causes the game to stutter and eventually crash
- hitting the wall with the paddle causes the game to stutter and eventually crash
- sometimes, the ball randomly gets stuck in the blocks
  - this bug will probably not happen once I make blocks disappear, so it's probably not that important
- bouncing can be weird when hitting corners (a little difficult to replicate)
  - see weirdbouncing.mp4, 10 seconds in

things to note for future:
- I directly check the tilemap in vram for collision with background, this is probably bad practice
  - better practice seems to be to store the tilemap in wram and copy over to vram
  - I didn't do this since when I did this, it was ridiculously buggy (see wram_collision.mp4)
  - For some reason, from debugging, it was fine when I updated wram, but when copying the data in wram to vram, some values seemed to somehow retain their original values instead of getting copied

Credit for the font goes to
